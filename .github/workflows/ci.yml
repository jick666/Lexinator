name: CI

# ─────────────────────────────────────────────────────────────
#  GLOBAL CONFIG
# ─────────────────────────────────────────────────────────────
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read          # checkout + diff
  pull-requests: write    # PR comment

env:
  NODE_LTS: 20.13.1
  NODE_CUR: 22            # “current” channel
  COV_THRESHOLD: 90
  BENCH_THRESH_PCT: 10    # fail if slower by >10 %

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ─────────────────────────────────────────────────────────────
#  JOB: lint
# ─────────────────────────────────────────────────────────────
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS }}
          cache: npm

      - name: Install deps
        run: npm ci --loglevel=error

      - name: ESLint
        run: npm run lint --if-present

      - name: Commit-lint (PR only)
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} \
                         --to   ${{ github.event.pull_request.head.sha }}

# ─────────────────────────────────────────────────────────────
#  JOB: test  (Node 20 LTS + 22 current)
# ─────────────────────────────────────────────────────────────
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [${{ env.NODE_LTS }}, ${{ env.NODE_CUR }}]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install
        run: npm ci --loglevel=error

      - name: Unit tests + coverage
        run: npm test -- --coverage

      - name: Enforce coverage ≥${{ env.COV_THRESHOLD }} %
        run: |
          node -e "require('./src/utils/checkCoverage').checkCoverage(${process.env.COV_THRESHOLD})"

      - name: Upload coverage artefact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node }}
          path: coverage

# ─────────────────────────────────────────────────────────────
#  JOB: bench  (micro-bench regression guard)
# ─────────────────────────────────────────────────────────────
  bench:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS }}
          cache: npm

      - name: Install
        run: npm ci --loglevel=error

      - name: Run benchmark
        run: |
          node --expose-gc tests/benchmarks/lexer.bench.js > bench.json

      - name: Compare to baseline
        env:
          BENCH_THRESH_PCT: ${{ env.BENCH_THRESH_PCT }}
        run: |
          BASE_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main/bench.json"
          curl -sfL "$BASE_URL" -o base.json || echo '{}' > base.json
          node <<'JS'
          const fs = require('fs');
          const base = JSON.parse(fs.readFileSync('base.json','utf8'));
          const head = JSON.parse(fs.readFileSync('bench.json','utf8'));
          const thresh = Number(process.env.BENCH_THRESH_PCT);
          let regress=false, lines=[];
          for(const k in head){
            if(!base[k]) continue;
            const delta=((head[k]-base[k])/base[k])*100;
            if(delta>thresh) regress=true;
            lines.push(`${k}: ${base[k].toFixed(2)} → ${head[k].toFixed(2)} ms  (${delta.toFixed(1)} %)`);
          }
          fs.writeFileSync('bench-report.txt', lines.join('\n'));
          if(regress){
            console.error('Benchmark regression detected'); process.exit(1);
          }
          JS

      - name: Upload bench artefacts
        uses: actions/upload-artifact@v4
        with:
          name: bench
          path: |
            bench.json
            bench-report.txt

# ─────────────────────────────────────────────────────────────
#  JOB: comment (PR decoration)
# ─────────────────────────────────────────────────────────────
  comment:
    if: github.event_name == 'pull_request'
    needs: [test, bench]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: coverage-${{ env.NODE_LTS }}
          path: cov

      - uses: actions/download-artifact@v4
        with:
          name: bench
          path: bench

      - name: Post PR summary
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: |
            cov/coverage-summary.json
            bench/bench-report.txt
          header: "CI summary"

# ─────────────────────────────────────────────────────────────
#  JOB: release  (GitHub-only semantic-release)
# ─────────────────────────────────────────────────────────────
  release:
    needs: [lint, test, bench]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write     # push tags & CHANGELOG
      packages: write     # allow future GH Packages publish
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS }}
          cache: npm

      - name: Install prod deps only
        run: npm ci --loglevel=error --only=prod

      - name: semantic-release (GitHub only)
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_REPO }}
        run: npx semantic-release

      - name: Upload new bench baseline
        if: github.actor != 'github-actions[bot]'
        run: |
          git config user.email "ci@users.noreply.github.com"
          git config user.name  "github-actions[bot]"
          git switch -c bench-baseline
          cp bench.json bench.json
          git add bench.json
          git commit -m "chore(ci): update benchmark baseline [skip ci]"
          git push -f origin bench-baseline
